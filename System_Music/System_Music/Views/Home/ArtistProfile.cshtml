@model System_Music.Models.ViewModels.ArtistProfileViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = Model.Artist.Name;
    string artistImage = string.IsNullOrEmpty(Model.Artist.Image) ? "https://via.placeholder.com/600x800" : Model.Artist.Image;
}
<link rel="stylesheet" href="~/css/artist-profile.css" />
<link rel="stylesheet" href="~/css/footer.css" />

<div class="main-view">
    <!-- Container cho ảnh nền -->
    <div class="background-container" style="background-image: url('@artistImage');"></div>
    <!-- Overlay cho gradient và blur -->
    <div class="background-overlay"></div>

    <div class="artist-header">
        <div class="header-content">
            <div class="header-details">
                <div class="verified-artist">
                    <svg class="verified-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" fill="#FFFFFF" />
                    </svg>
                    <span class="encore-text-body-small">Nghệ sĩ đã xác minh</span>
                </div>
                <h1 class="rEN7ncpaUeSGL9z0NGQR encore-text-headline-large">@Model.Artist.Name</h1>
            </div>
        </div>
        <div class="header-actions">
            <!-- Nút Play lớn đã bị xóa -->
        </div>
    </div>

    <div class="artist-menu">
        <button class="play-button-large" id="play-artist-btn" data-artist-id="@Model.Artist.ArtistId" aria-label="Phát toàn bộ bài hát của nghệ sĩ" data-encore-id="buttonPrimary">
            <svg class="play-icon-large" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M8 5v14l11-7z" fill="#000000" />
            </svg>
        </button>
        <button class="follow-button">Theo dõi</button>
        <button class="more-button" aria-haspopup="menu" data-testid="more-button" aria-label="Các tùy chọn khác cho Nghệ Sĩ">
            <svg class="more-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z" fill="#FFFFFF" />
            </svg>
        </button>
    </div>

    <div class="content-spacing">
        <div class="track-list" id="track-list-section">
            <h2>Phổ biến</h2>
            <div class="grid-header">
                <div class="grid-header-index">#</div>
                <div class="grid-header-title">Tiêu đề</div>
                <div class="grid-header-duration">Thời lượng</div>
            </div>
            @if (Model.Tracks != null && Model.Tracks.Any())
            {
                int index = 1;
                @foreach (var track in Model.Tracks.OrderByDescending(t => t.PlayCount).Take(5))
                {
                    string duration = TimeSpan.FromSeconds(track.Duration).ToString(@"m\:ss");
                    <div class="grid-row" data-track-id="@track.TrackId">
                        <div class="grid-index">@index</div>
                        <button class="play-button" aria-label="Phát bài hát @track.Title">
                            <svg class="play-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="m7.05 3.606 13.49 7.788a.7.7 0 0 1 0 1.212L7.05 20.394A.7.7 0 0 1 6 19.788V4.212a.7.7 0 0 1 1.05-.606z" fill="#FFFFFF" />
                            </svg>
                        </button>
                        <div class="grid-image">
                            <img src="@track.ImageUrl" alt="@track.Title" />
                        </div>
                        <div class="grid-cell">
                            <a asp-controller="Track" asp-action="Detail" asp-route-id="@track.TrackId" class="grid-cell-title">@track.Title</a>
                            <div class="grid-cell-artist">@Model.Artist.Name</div>
                        </div>
                        @if (index == 3)
                        {
                            <svg class="popular-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M8 5v14l11-7z" fill="#1DB954" />
                            </svg>
                        }
                        <div class="grid-cell-duration">@duration</div>
                    </div>
                    index++;
                }
            }
            else
            {
                <p>Không có bài hát nào để hiển thị.</p>
            }
        </div>

        <div class="album-list">
            <h2>Album</h2>
            <div class="album-grid">
                @if (Model.Albums != null && Model.Albums.Any())
                {
                    foreach (var album in Model.Albums)
                    {
                        <div class="album-item">
                            <div class="album-image">
                                <img src="@album.Image" alt="@album.Name" />
                                <button class="play-album-btn" data-album-id="@album.AlbumId" aria-label="Phát album @album.Name">
                                    <svg class="play-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                        <path d="m7.05 3.606 13.49 7.788a.7.7 0 0 1 0 1.212L7.05 20.394A.7.7 0 0 1 6 19.788V4.212a.7.7 0 0 1 1.05-.606z" fill="#000000" />
                                    </svg>
                                </button>
                            </div>
                            <div class="album-details">
                                <a asp-controller="Home" asp-action="DetailAlbum" asp-route-id="@album.AlbumId" class="album-title">@album.Name</a>
                                <p class="album-artist">@Model.Artist.Name</p>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>Không có album nào để hiển thị.</p>
                }
            </div>
        </div>
    </div>
</div>

<div id="modal" class="modal">
    <div class="modal-content">
        <ul class="modal-options">
            <li class="modal-option">
                <svg data-encore-id="icon" role="img" aria-hidden="true" class="modal-icon" viewBox="0 0 16 16">
                    <path d="M4.765 1.423c-.42.459-.713.992-.903 1.554-.144.421-.264 1.173-.22 1.894.077 1.321.638 2.408 1.399 3.316v.002l.083.098c.611.293 1.16.696 1.621 1.183a2.244 2.244 0 0 0-.426-2.092l-.127-.153-.002-.001c-.612-.73-.997-1.52-1.051-2.442-.032-.54.066-1.097.143-1.323a2.85 2.85 0 0 1 .589-1.022 2.888 2.888 0 0 1 4.258 0c.261.284.456.628.59 1.022.076.226.175.783.143 1.323-.055.921-.44 1.712-1.052 2.442l-.002.001-.127.153a2.25 2.25 0 0 0 .603 3.39l2.209 1.275a3.248 3.248 0 0 1 1.605 2.457h-5.99a5.466 5.466 0 0 1-.594 1.5h8.259l-.184-1.665a4.75 4.75 0 0 0-2.346-3.591l-2.209-1.275a.75.75 0 0 1-.201-1.13l.126-.152h.001c.76-.909 1.32-1.995 1.399-3.316.043-.721-.077-1.473-.20-1.894a4.46 4.46 0 0 0-.644-1.24v-.002h-.002a4.388 4.388 0 0 0-6.728-.312zM2 12.5v-2h1.5v2h2V14h-2v2H2v-2H0v-1.5h2z"></path>
                </svg>
                Theo dõi
            </li>
            <li class="modal-option">
                <svg data-encore-id="icon" role="img" aria-hidden="true" class="modal-icon" viewBox="0 0 16 16">
                    <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zM3.965 2.904a6.5 6.5 0 0 1 9.131 9.131L3.965 2.904zm-1.061 1.06 9.131 9.132a6.5 6.5 0 0 1-9.131-9.131z"></path>
                </svg>
                Không phát nghệ sĩ này
            </li>
            <li class="modal-option">
                <svg data-encore-id="icon" role="img" aria-hidden="true" class="modal-icon" viewBox="0 0 16 16">
                    <path d="M5.624 3.886A4.748 4.748 0 0 0 3.25 8c0 1.758.955 3.293 2.375 4.114l.75-1.3a3.249 3.249 0 0 1 0-5.63l-.75-1.298zm4.001 1.299.75-1.3A4.748 4.748 0 0 1 12.75 8a4.748 4.748 0 0 1-2.375 4.114l-.75-1.3a3.249 3.249 0 0 0 0-5.63zM8 6.545a1.455 1.455 0 1 0 0 2.91 1.455 1.455 0 0 0 0-2.91z"></path>
                    <path d="M4 1.07A7.997 7.997 0 0 0 0 8a7.997 7.997 0 0 0 4 6.93l.75-1.3A6.497 6.497 0 0 1 1.5 8a6.497 6.497 0 0 1 3.25-5.63L4 1.07zm7.25 1.3.75-1.3A7.997 7.997 0 0 1 16 8a7.997 7.997 0 0 1-3.999 6.93l-.75-1.3A6.497 6.497 0 0 0 14.5 8a6.497 6.497 0 0 0-3.25-5.63z"></path>
                </svg>
                Chuyển đến radio theo nghệ sĩ
            </li>
            <li class="modal-option">
                <svg data-encore-id="icon" role="img" aria-hidden="true" class="modal-icon" viewBox="0 0 16 16">
                    <path d="M4.069.967h7.855L15.98 8l-4.057 7.034H4.069L.01 8 4.069.967zm.866 1.5L1.743 8l3.192 5.534h6.122L14.25 8l-3.192-5.533H4.935z"></path>
                    <path d="M7.246 9V4h1.5v5h-1.5zm0 3.025v-1.5h1.5v1.5h-1.5z"></path>
                </svg>
                Báo cáo
            </li>
            <li class="modal-option">
                <svg data-encore-id="icon" role="img" aria-hidden="true" class="modal-icon" viewBox="0 0 16 16">
                    <path d="M1 5.75A.75.75 0 0 1 1.75 5H4v1.5H2.5v8h11v-8H12V5h2.25a.75.75 0 0 1 .75.75v9.5a.75.75 0 0 1-.75.75H1.75a.75.75 0 0 1-.75-.75v-9.5z"></path>
                    <path d="M8 9.576a.75.75 0 0 0 .75-.75V2.903l1.454 1.454a.75.75 0 0 0 1.06-1.06L8 .03 4.735 3.296a.75.75 0 0 0 1.06 1.061L7.25 2.903v5.923c0 .414.336.75.75.75z"></path>
                </svg>
                Chia sẻ
            </li>
            <li class="modal-option">
                <svg data-encore-id="icon" role="img" aria-hidden="true" class="modal-icon" viewBox="0 0 16 16">
                    <path d="M8.319.006A8.003 8.003 0 0 0 .006 7.683a7.998 7.998 0 0 0 7.677 8.31A8 8 0 0 0 8.319.006Zm3.377 11.72a.478.478 0 0 1-.652.179 9.612 9.612 0 0 0-3.426-1.165 9.599 9.599 0 0 0-3.613.176.479.479 0 0 1-.226-.93c1.3-.316 2.637-.38 3.972-.193 1.336.188 2.602.62 3.765 1.28.228.13.309.422.178.652l.002.001Zm1.05-2.1a.62.62 0 0 1-.841.25A11.793 11.793 0 0 0 7.923 8.57a11.775 11.775 0 0 0-4.188.158.622.622 0 0 1-.74-.473.62.62 0 0 1 .473-.739 13.032 13.032 0 0 1 4.626-.176c1.552.217 3.031.704 4.4 1.444a.62.62 0 0 1 .25.842h.003Zm1.166-2.367a.765.765 0 0 1-1.031.326 14.307 14.307 0 0 0-4.612-1.473 14.285 14.285 0 0 0-4.84.145.764.764 0 1 1-.303-1.499 15.812 15.812 0 0 1 5.356-.16c1.791.252 3.51.8 5.104 1.63.374.194.520.656.326 1.03Z"></path>
                </svg>
                Mở trong ứng dụng dành cho máy tính
            </li>
        </ul>
    </div>
</div>

@await Html.PartialAsync("_Footer")

<script src="/js/vibrant.min.js" onload="window.vibrantLoaded=true;" onerror="console.error('Lỗi tải Vibrant.js từ local');"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Đảm bảo window.playerState sử dụng audio từ _NowPlayingBar.cshtml
        window.playerState = window.playerState || {
            audio: document.getElementById('audio-player'),
            isPlaying: false,
            currentTrack: null,
            queue: [],
            currentIndex: 0,
            repeatMode: 'off'
        };

        // Hàm phát bài hát và cập nhật NowPlayingBar
        function playTrack(track, index) {
            if (!track || !track.audioUrl) {
                console.error('Bài hát không hợp lệ:', track);
                alert('Vui lòng chọn một bài hát hợp lệ.');
                return;
            }

            console.log('Đang phát bài:', track.title);
            window.playerState.currentTrack = track;
            window.playerState.currentIndex = index;

            // Chuẩn hóa danh sách nghệ sĩ
            let artistsList = [];
            if (track.trackArtists && Array.isArray(track.trackArtists) && track.trackArtists.length > 0) {
                // Lấy tất cả nghệ sĩ từ track.trackArtists
                artistsList = track.trackArtists
                    .map(ta => ta.artist && typeof ta.artist.name === 'string' ? ta.artist.name : null)
                    .filter(name => name);
            }
            if (artistsList.length === 0 && track.artists && Array.isArray(track.artists) && track.artists.length > 0) {
                // Nếu track.trackArtists không có dữ liệu, lấy từ track.artists
                artistsList = track.artists
                    .filter(name => typeof name === 'string' && name.trim() !== '');
            }
            if (artistsList.length === 0) {
                // Fallback nếu không có dữ liệu nghệ sĩ
                artistsList = ['@Model.Artist.Name'];
            }

            // Đảm bảo track.trackArtists có định dạng phù hợp với updateNowPlayingBar
            track.trackArtists = artistsList.map(name => ({
                artist: { name: name.trim() }
            }));

            console.log('Danh sách nghệ sĩ đã xử lý:', artistsList);
            console.log('Dữ liệu track gửi đến updateNowPlayingBar:', track);

            // Cập nhật UI của NowPlayingBar với dữ liệu đã chuẩn hóa
            if (!window.updateNowPlayingBar(track)) {
                console.error('Không thể cập nhật NowPlayingBar');
                return;
            }

            // Thiết lập nguồn âm thanh và phát
            window.playerState.audio.src = track.audioUrl;
            window.playerState.audio.play().then(() => {
                window.playerState.isPlaying = true;
                window.updatePlayPauseButton(true);
                console.log('Đang phát:', track.title);
            }).catch(error => {
                console.error('Lỗi phát bài:', error);
                alert('Lỗi khi phát bài hát: ' + error.message);
                window.playerState.isPlaying = false;
                window.updatePlayPauseButton(false);
            });
        }

        // Xử lý nút phát toàn bộ nghệ sĩ
        const playArtistBtn = document.getElementById('play-artist-btn');
            if (playArtistBtn) {
                const artistId = playArtistBtn.getAttribute('data-artist-id');
                fetch(`/api/Track?artistId=${artistId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Lỗi HTTP: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (Array.isArray(data) && data.length > 0) {
                            window.playerState.queue = data.map(track => {
                                let artistsList = [];
                                if (track.trackArtists && Array.isArray(track.trackArtists) && track.trackArtists.length > 0) {
                                    artistsList = track.trackArtists
                                        .map(ta => ta.artist && typeof ta.artist.name === 'string' ? ta.artist.name : null)
                                        .filter(name => name);
                                }
                                if (artistsList.length === 0 && track.artists && Array.isArray(track.artists) && track.artists.length > 0) {
                                    artistsList = track.artists
                                        .filter(name => typeof name === 'string' && name.trim() !== '');
                                }
                                if (artistsList.length === 0) {
                                    artistsList = ['@Model.Artist.Name'];
                                }
                                console.log(`Danh sách nghệ sĩ cho bài ${track.title}:`, artistsList);
                                return {
                                    trackId: track.trackId,
                                    title: track.title,
                                    artists: artistsList,
                                    imageUrl: track.imageUrl || '',
                                    audioUrl: track.audioUrl || '',
                                    duration: track.duration || 0,
                                    trackArtists: artistsList.map(name => ({ artist: { name: name.trim() } }))
                                };
                            });
                            playArtistBtn.addEventListener('click', function () {
                                if (window.playerState.queue.length > 0) {
                                    playTrack(window.playerState.queue[0], 0);
                                } else {
                                    alert('Không có bài hát nào của nghệ sĩ này.');
                                }
                            });
                        } else {
                            console.warn('Dữ liệu từ API không hợp lệ hoặc rỗng:', data);
                            alert('Không thể tải danh sách bài hát.');
                        }
                    })
                    .catch(error => {
                        console.error('Lỗi lấy danh sách bài hát của nghệ sĩ:', error);
                        alert('Không thể tải danh sách bài hát do lỗi server.');
                    });
            }

        // Xử lý nút phát cho từng bài hát
        const trackButtons = document.querySelectorAll('.play-button');
            trackButtons.forEach((trackButton, index) => {
                trackButton.addEventListener('click', function (e) {
                    e.preventDefault();
                    const gridRow = trackButton.closest('.grid-row');
                    if (!gridRow) {
                        console.warn('Không tìm thấy grid-row');
                        return;
                    }
                    const trackId = gridRow.getAttribute('data-track-id');
                    if (!trackId) {
                        console.warn('Không tìm thấy track-id');
                        return;
                    }
                    fetch(`/api/Track/${trackId}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Lỗi HTTP: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(track => {
                            let artistsList = [];
                            if (track.trackArtists && Array.isArray(track.trackArtists) && track.trackArtists.length > 0) {
                                artistsList = track.trackArtists
                                    .map(ta => ta.artist && typeof ta.artist.name === 'string' ? ta.artist.name : null)
                                    .filter(name => name);
                            }
                            if (artistsList.length === 0 && track.artists && Array.isArray(track.artists) && track.artists.length > 0) {
                                artistsList = track.artists
                                    .filter(name => typeof name === 'string' && name.trim() !== '');
                            }
                            if (artistsList.length === 0) {
                                artistsList = ['@Model.Artist.Name'];
                            }
                            console.log(`Danh sách nghệ sĩ cho bài ${track.title}:`, artistsList);
                            const trackData = {
                                trackId: track.trackId,
                                title: track.title,
                                artists: artistsList,
                                imageUrl: track.imageUrl || '',
                                audioUrl: track.audioUrl || '',
                                duration: track.duration || 0,
                                trackArtists: artistsList.map(name => ({ artist: { name: name.trim() } }))
                            };
                            if (!window.playerState.queue.length) {
                                window.playerState.queue = [trackData];
                            }
                            playTrack(trackData, index);
                        })
                        .catch(error => {
                            console.error('Lỗi lấy thông tin bài hát:', error);
                            alert('Không thể phát bài hát do lỗi server.');
                        });
                });
            });

        // Xử lý nút phát cho từng album
        const playAlbumButtons = document.querySelectorAll('.play-album-btn');
        playAlbumButtons.forEach(button => {
            button.addEventListener('click', function (e) {
                e.preventDefault();
                const albumId = button.getAttribute('data-album-id');
                if (!albumId) {
                    console.warn('Không tìm thấy album-id');
                    return;
                }
                fetch(`/api/public/tracks/by-album/${albumId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Lỗi HTTP: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (Array.isArray(data) && data.length > 0) {
                            window.playerState.queue = data.map(track => {
                                const artistsList = track.trackArtists && Array.isArray(track.trackArtists) && track.trackArtists.length > 0
                                    ? track.trackArtists.map(ta => ta.artist?.name).filter(name => name && typeof name === 'string')
                                    : (track.artists && Array.isArray(track.artists) && track.artists.length > 0
                                        ? [track.artists[0]]
                                        : ['@Model.Artist.Name']);
                                console.log(`Danh sách nghệ sĩ cho bài ${track.title} trong album:`, artistsList);
                                return {
                                    trackId: track.trackId || track.title,
                                    title: track.title,
                                    artists: artistsList,
                                    imageUrl: track.imageUrl || '',
                                    audioUrl: track.audioUrl || '',
                                    duration: track.duration || 0,
                                    trackArtists: track.trackArtists || []
                                };
                            });
                            if (window.playerState.queue.length > 0) {
                                playTrack(window.playerState.queue[0], 0);
                            } else {
                                alert('Không có bài hát nào trong album.');
                            }
                        } else {
                            console.warn('Dữ liệu từ API không hợp lệ hoặc rỗng:', data);
                            alert('Không thể tải danh sách bài hát.');
                        }
                    })
                    .catch(error => {
                        console.error('Lỗi lấy danh sách bài hát của album:', error);
                        alert('Không thể tải danh sách bài hát do lỗi server.');
                    });
            });
        });
            // Xử lý nút chuyển tiếp và lùi bài hát
    const nextBtn = document.querySelector('.next-btn');
    const previousBtn = document.querySelector('.previous-btn');

    if (nextBtn && previousBtn) {
        nextBtn.addEventListener('click', function () {
            if (window.playerState.queue && window.playerState.queue.length > 1) {
                let nextIndex = window.playerState.currentIndex + 1;
                if (nextIndex >= window.playerState.queue.length) {
                    nextIndex = 0; // Quay lại đầu danh sách nếu ở cuối
                }
                window.playerState.currentIndex = nextIndex;
                const nextTrack = window.playerState.queue[nextIndex];
                playTrack(nextTrack, nextIndex);
            } else {
                console.warn('Không có đủ bài hát trong hàng đợi để chuyển tiếp.');
            }
        });

        previousBtn.addEventListener('click', function () {
            if (window.playerState.queue && window.playerState.queue.length > 1) {
                let previousIndex = window.playerState.currentIndex - 1;
                if (previousIndex < 0) {
                    previousIndex = window.playerState.queue.length - 1; // Quay lại cuối danh sách nếu ở đầu
                }
                window.playerState.currentIndex = previousIndex;
                const previousTrack = window.playerState.queue[previousIndex];
                playTrack(previousTrack, previousIndex);
            } else {
                console.warn('Không có đủ bài hát trong hàng đợi để lùi lại.');
            }
        });

        // Cập nhật trạng thái nút dựa trên hàng đợi
        function updateNavigationButtons() {
            if (window.playerState.queue && window.playerState.queue.length > 1) {
                nextBtn.removeAttribute('disabled');
                previousBtn.removeAttribute('disabled');
            } else {
                nextBtn.setAttribute('disabled', 'disabled');
                previousBtn.setAttribute('disabled', 'disabled');
            }
        }

        // Gọi lần đầu và cập nhật khi queue thay đổi
        updateNavigationButtons();
        window.addEventListener('playerQueueUpdated', updateNavigationButtons);
    }
        // Cập nhật vị trí modal
        function updateModalPosition() {
            const modal = document.getElementById('modal');
            const modalContent = document.querySelector('.modal-content');
            const moreButton = document.querySelector('.more-button');

            if (!modal || !modalContent || !moreButton) {
                console.error('Không tìm thấy modal, modal-content hoặc more-button');
                return;
            }

            if (modal.style.display === 'block') {
                const buttonRect = moreButton.getBoundingClientRect();
                console.log('Vị trí nút 3 chấm:', buttonRect);

                modalContent.style.top = `${buttonRect.bottom + window.scrollY + 2}px`;
                modalContent.style.left = `${buttonRect.left + window.scrollX}px`;

                const modalOptions = document.querySelectorAll('.modal-option');
                let maxWidth = 0;
                modalOptions.forEach(option => {
                    const width = option.scrollWidth;
                    if (width > maxWidth) maxWidth = width;
                });
                console.log('Chiều rộng lớn nhất của modal-option:', maxWidth, 'px');
            }
        }

        // Mở modal khi click nút 3 chấm
        document.querySelector('.more-button').addEventListener('click', function(event) {
            event.stopPropagation();
            const modal = document.getElementById('modal');
            const modalContent = document.querySelector('.modal-content');
            const moreButton = document.querySelector('.more-button');

            if (!modal || !modalContent || !moreButton) {
                console.error('Không tìm thấy modal, modal-content hoặc more-button');
                return;
            }

            const buttonRect = moreButton.getBoundingClientRect();
            console.log('Mở modal - Vị trí nút 3 chấm:', buttonRect);

            modalContent.style.top = `${buttonRect.bottom + window.scrollY + 2}px`;
            modalContent.style.left = `${buttonRect.left + window.scrollX}px`;

            modal.style.display = 'block';
            updateModalPosition();
        });

        // Đóng modal khi click bên ngoài
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('modal');
            const moreButton = document.querySelector('.more-button');
            const modalContent = document.querySelector('.modal-content');

            if (!modal || !moreButton || !modalContent) return;

            if (event.target !== moreButton && !modalContent.contains(event.target)) {
                modal.style.display = 'none';
            }
        });

        // Cập nhật vị trí modal khi cuộn trang
        window.addEventListener('scroll', function() {
            console.log('Sự kiện cuộn được kích hoạt');
            updateModalPosition();
        });

        // Cập nhật vị trí modal khi thay đổi kích thước cửa sổ
        window.addEventListener('resize', function() {
            console.log('Sự kiện resize được kích hoạt');
            updateModalPosition();
        });
    });
</script>